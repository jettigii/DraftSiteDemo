// <auto-generated />
using System;
using DraftSiteRepository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DraftSiteRepository.Migrations
{
    [DbContext(typeof(DraftSiteContext))]
    partial class DraftSiteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DraftSiteModels.Entities.Draft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("HasComputerTeams")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSinglePick")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("PickTime")
                        .HasColumnType("int");

                    b.Property<int>("RoundCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(80) CHARACTER SET utf8mb4")
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("Drafts");
                });

            modelBuilder.Entity("DraftSiteModels.Entities.DraftSiteUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DraftSiteModels.Entities.DraftTeamUser", b =>
                {
                    b.Property<int>("DraftId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("DraftId", "UserId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("DraftTeamUsers");
                });

            modelBuilder.Entity("DraftSiteModels.Entities.DraftTeamUserPlayer", b =>
                {
                    b.Property<int>("DraftId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("DraftId", "UserId", "TeamId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("DraftId", "TeamId", "UserId");

                    b.ToTable("DraftTeamUserPlayers");
                });

            modelBuilder.Entity("DraftSiteModels.Entities.DraftUser", b =>
                {
                    b.Property<int>("DraftId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DraftId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("DraftUsers");
                });

            modelBuilder.Entity("DraftSiteModels.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("College")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("DraftSiteModels.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("DraftSiteModels.Entities.DraftTeamUser", b =>
                {
                    b.HasOne("DraftSiteModels.Entities.Draft", null)
                        .WithMany("DraftTeamUsers")
                        .HasForeignKey("DraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DraftSiteModels.Entities.Team", "Team")
                        .WithMany("DraftTeamUsers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DraftSiteModels.Entities.DraftUser", "DraftUser")
                        .WithMany("DraftTeamUsers")
                        .HasForeignKey("DraftId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DraftSiteModels.Entities.DraftTeamUserPlayer", b =>
                {
                    b.HasOne("DraftSiteModels.Entities.Player", "Player")
                        .WithMany("DraftTeamUserPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DraftSiteModels.Entities.DraftTeamUser", "DraftTeamUser")
                        .WithMany("DraftTeamUserPlayers")
                        .HasForeignKey("DraftId", "TeamId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DraftSiteModels.Entities.DraftUser", b =>
                {
                    b.HasOne("DraftSiteModels.Entities.Draft", "Draft")
                        .WithMany("DraftUsers")
                        .HasForeignKey("DraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DraftSiteModels.Entities.DraftSiteUser", "User")
                        .WithMany("DraftUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
