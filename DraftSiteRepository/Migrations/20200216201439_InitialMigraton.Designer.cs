// <auto-generated />
using System;
using DraftSiteRepository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DraftSiteRepository.Migrations
{
    [DbContext(typeof(DraftSiteContext))]
    [Migration("20200216201439_InitialMigraton")]
    partial class InitialMigraton
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DraftSiteModels.Entities.Draft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int>("DraftStartTypeId")
                        .HasColumnName("draft_start_type_id")
                        .HasColumnType("int");

                    b.Property<int>("DraftStatusId")
                        .HasColumnName("draft_status_id")
                        .HasColumnType("int");

                    b.Property<bool>("IsComputerTeams")
                        .HasColumnName("is_computer_teams")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMultiSelect")
                        .HasColumnName("is_multi_select")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublic")
                        .HasColumnName("is_public")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("OwnerId")
                        .HasColumnName("owner_id")
                        .HasColumnType("int");

                    b.Property<int>("PickTimeId")
                        .HasColumnName("pick_time_id")
                        .HasColumnType("int");

                    b.Property<int>("RoundCount")
                        .HasColumnName("round_count")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("password")
                        .HasColumnName("password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id")
                        .HasName("pk_drafts");

                    b.HasIndex("DraftStartTypeId")
                        .HasName("ix_drafts_draft_start_type_id");

                    b.HasIndex("DraftStatusId")
                        .HasName("ix_drafts_draft_status_id");

                    b.HasIndex("OwnerId")
                        .HasName("ix_drafts_owner_id");

                    b.HasIndex("PickTimeId")
                        .HasName("ix_drafts_pick_time_id");

                    b.ToTable("drafts");
                });

            modelBuilder.Entity("DraftSiteModels.Entities.DraftSiteUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .HasColumnName("token")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id")
                        .HasName("pk_draft_site_users");

                    b.ToTable("draft_site_users");
                });

            modelBuilder.Entity("DraftSiteModels.Entities.DraftStartType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnName("is_enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id")
                        .HasName("pk_draft_start_types");

                    b.ToTable("draft_start_types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsEnabled = true,
                            Name = "Manual",
                            Value = "Manual"
                        },
                        new
                        {
                            Id = 2,
                            IsEnabled = false,
                            Name = "Automatic",
                            Value = "Automatic"
                        });
                });

            modelBuilder.Entity("DraftSiteModels.Entities.DraftStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id")
                        .HasName("pk_draft_statuses");

                    b.ToTable("draft_statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "WaitingForPlayers",
                            Value = "Waiting for players"
                        },
                        new
                        {
                            Id = 2,
                            Name = "WaitingForOwnerToStart",
                            Value = "Waiting for owner"
                        },
                        new
                        {
                            Id = 3,
                            Name = "WaitingForTimerToStart",
                            Value = "Waiting for time"
                        },
                        new
                        {
                            Id = 4,
                            Name = "InProgress",
                            Value = "In Progress"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Paused",
                            Value = "Paused"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Completed",
                            Value = "Completed"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Canceled",
                            Value = "Canceled"
                        });
                });

            modelBuilder.Entity("DraftSiteModels.Entities.DraftTeamUser", b =>
                {
                    b.Property<int>("DraftId")
                        .HasColumnName("draft_id")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("int");

                    b.Property<bool>("IsComputer")
                        .HasColumnName("is_computer")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("DraftId", "UserId", "TeamId")
                        .HasName("pk_draft_team_users");

                    b.HasIndex("TeamId")
                        .HasName("ix_draft_team_users_team_id");

                    b.ToTable("draft_team_users");
                });

            modelBuilder.Entity("DraftSiteModels.Entities.DraftTeamUserPlayer", b =>
                {
                    b.Property<int>("DraftId")
                        .HasColumnName("draft_id")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("int");

                    b.HasKey("DraftId", "UserId", "TeamId", "PlayerId")
                        .HasName("pk_draft_team_user_players");

                    b.HasIndex("PlayerId")
                        .HasName("ix_draft_team_user_players_player_id");

                    b.HasIndex("DraftId", "TeamId", "UserId")
                        .HasName("ix_draft_team_user_players_draft_id_team_id_user_id");

                    b.ToTable("draft_team_user_players");
                });

            modelBuilder.Entity("DraftSiteModels.Entities.DraftTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TimeInSeconds")
                        .HasColumnName("time_in_seconds")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id")
                        .HasName("pk_draft_times");

                    b.ToTable("draft_times");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ThirtySeconds",
                            TimeInSeconds = 30,
                            Value = "30 Seconds"
                        },
                        new
                        {
                            Id = 2,
                            Name = "OneMinute",
                            TimeInSeconds = 60,
                            Value = "1 Minute"
                        },
                        new
                        {
                            Id = 3,
                            Name = "FiveMinutes",
                            TimeInSeconds = 300,
                            Value = "5 Minutes"
                        },
                        new
                        {
                            Id = 4,
                            Name = "OneHour",
                            TimeInSeconds = 3600,
                            Value = "1 Hour"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Unlimited",
                            TimeInSeconds = 0,
                            Value = "Unlimited"
                        });
                });

            modelBuilder.Entity("DraftSiteModels.Entities.DraftUser", b =>
                {
                    b.Property<int>("DraftId")
                        .HasColumnName("draft_id")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.HasKey("DraftId", "UserId")
                        .HasName("pk_draft_users");

                    b.HasIndex("UserId")
                        .HasName("ix_draft_users_user_id");

                    b.ToTable("draft_users");
                });

            modelBuilder.Entity("DraftSiteModels.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("College")
                        .HasColumnName("college")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id")
                        .HasName("pk_players");

                    b.ToTable("players");
                });

            modelBuilder.Entity("DraftSiteModels.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id")
                        .HasName("pk_teams");

                    b.ToTable("teams");
                });

            modelBuilder.Entity("DraftSiteModels.Entities.Draft", b =>
                {
                    b.HasOne("DraftSiteModels.Entities.DraftStartType", "DraftStartType")
                        .WithMany("Drafts")
                        .HasForeignKey("DraftStartTypeId")
                        .HasConstraintName("fk_drafts_draft_start_types_draft_start_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DraftSiteModels.Entities.DraftStatus", "DraftStatus")
                        .WithMany("Drafts")
                        .HasForeignKey("DraftStatusId")
                        .HasConstraintName("fk_drafts_draft_statuses_draft_status_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DraftSiteModels.Entities.DraftSiteUser", "Owner")
                        .WithMany("Drafts")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_drafts_draft_site_users_owner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DraftSiteModels.Entities.DraftTime", "PickTime")
                        .WithMany("Drafts")
                        .HasForeignKey("PickTimeId")
                        .HasConstraintName("fk_drafts_draft_times_pick_time_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DraftSiteModels.Entities.DraftTeamUser", b =>
                {
                    b.HasOne("DraftSiteModels.Entities.Draft", null)
                        .WithMany("DraftTeamUsers")
                        .HasForeignKey("DraftId")
                        .HasConstraintName("fk_draft_team_users_drafts_draft_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DraftSiteModels.Entities.Team", "Team")
                        .WithMany("DraftTeamUsers")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("fk_draft_team_users_teams_team_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DraftSiteModels.Entities.DraftUser", "DraftUser")
                        .WithMany("DraftTeamUsers")
                        .HasForeignKey("DraftId", "UserId")
                        .HasConstraintName("fk_draft_team_users_draft_users_draft_id_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DraftSiteModels.Entities.DraftTeamUserPlayer", b =>
                {
                    b.HasOne("DraftSiteModels.Entities.Player", "Player")
                        .WithMany("DraftTeamUserPlayers")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("fk_draft_team_user_players_players_player_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DraftSiteModels.Entities.DraftTeamUser", "DraftTeamUser")
                        .WithMany("DraftTeamUserPlayers")
                        .HasForeignKey("DraftId", "TeamId", "UserId")
                        .HasConstraintName("fk_draft_team_user_players_draft_team_users_draft_id_team_id_us~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DraftSiteModels.Entities.DraftUser", b =>
                {
                    b.HasOne("DraftSiteModels.Entities.Draft", "Draft")
                        .WithMany("DraftUsers")
                        .HasForeignKey("DraftId")
                        .HasConstraintName("fk_draft_users_drafts_draft_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DraftSiteModels.Entities.DraftSiteUser", "User")
                        .WithMany("DraftUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_draft_users_draft_site_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
