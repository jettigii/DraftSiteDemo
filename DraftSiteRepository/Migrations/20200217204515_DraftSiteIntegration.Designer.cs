// <auto-generated />
using System;
using DraftSiteRepository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DraftSiteRepository.Migrations
{
    [DbContext(typeof(DraftSiteContext))]
    [Migration("20200217204515_DraftSiteIntegration")]
    partial class DraftSiteIntegration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DraftSiteModels.DraftSite.Admin", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<byte>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("active")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("varchar(40)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.Property<string>("FacebookUsername")
                        .HasColumnName("facebook_username")
                        .HasColumnType("varchar(250)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnName("firstname")
                        .HasColumnType("varchar(30)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.Property<DateTime>("Lastlogin")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("lastlogin")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnName("lastname")
                        .HasColumnType("varchar(30)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("varchar(40)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.Property<string>("TwitterHandler")
                        .HasColumnName("twitter_handler")
                        .HasColumnType("varchar(250)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasName("username");

                    b.ToTable("admin");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.AdminAuthTokens", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("AdminId")
                        .HasColumnName("admin_id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<DateTime>("Expires")
                        .HasColumnName("expires")
                        .HasColumnType("datetime");

                    b.Property<string>("HashedValidator")
                        .IsRequired()
                        .HasColumnName("hashed_validator")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.Property<string>("Selector")
                        .IsRequired()
                        .HasColumnName("selector")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.HasKey("Id");

                    b.ToTable("admin_auth_tokens");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Ads", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<DateTime>("Lastupdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("lastupdate")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.Property<byte[]>("Text")
                        .IsRequired()
                        .HasColumnName("text")
                        .HasColumnType("blob");

                    b.HasKey("Id");

                    b.ToTable("ads");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Authors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int>("AdminId")
                        .HasColumnName("admin_id")
                        .HasColumnType("mediumint(8)");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(250)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.HasKey("Id");

                    b.ToTable("authors");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Blogposts", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnName("author")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.Property<int>("AuthorId")
                        .HasColumnName("author_id")
                        .HasColumnType("int(11)");

                    b.Property<uint?>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("FeaturedImage")
                        .IsRequired()
                        .HasColumnName("featured_image")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.Property<uint?>("LastModifiedBy")
                        .HasColumnName("last_modified_by")
                        .HasColumnType("int(10) unsigned");

                    b.Property<byte>("Sport")
                        .HasColumnName("sport")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte[]>("Text")
                        .IsRequired()
                        .HasColumnName("text")
                        .HasColumnType("mediumblob");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("time")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.Property<uint>("Writer")
                        .HasColumnName("writer")
                        .HasColumnType("mediumint(8) unsigned");

                    b.HasKey("Id");

                    b.ToTable("blogposts");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.BlogpostsBak", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnName("author")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.Property<byte>("Sport")
                        .HasColumnName("sport")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnName("text")
                        .HasColumnType("mediumtext")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("time")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.Property<uint>("Writer")
                        .HasColumnName("writer")
                        .HasColumnType("mediumint(8) unsigned");

                    b.HasKey("Id");

                    b.ToTable("blogposts_bak");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Conferences", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<string>("Division")
                        .IsRequired()
                        .HasColumnName("division")
                        .HasColumnType("varchar(6)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(60)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnName("nickname")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("name");

                    b.ToTable("conferences");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Countries", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnName("nickname")
                        .HasColumnType("varchar(15)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("countries");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.DraftContributors", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("AdminId")
                        .HasColumnName("admin_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("DraftId")
                        .HasColumnName("draft_id")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("Id");

                    b.ToTable("draft_contributors");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.DraftPicks", b =>
                {
                    b.Property<uint>("DraftId")
                        .HasColumnName("draft_id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<ushort>("Order")
                        .HasColumnName("order")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<ushort>("Rank")
                        .HasColumnName("rank")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<uint>("RoundId")
                        .HasColumnName("round_id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<byte>("Type")
                        .HasColumnName("type")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<string>("TypeDesc")
                        .IsRequired()
                        .HasColumnName("type_desc")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("DraftId", "Order")
                        .HasName("PRIMARY");

                    b.ToTable("draft_picks");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.DraftPlayers", b =>
                {
                    b.Property<uint>("DraftId")
                        .HasColumnName("draft_id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<byte>("RankType")
                        .HasColumnName("rank_type")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<ushort>("Rank")
                        .HasColumnName("rank")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnName("comments")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<uint>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.HasKey("DraftId", "RankType", "Rank")
                        .HasName("PRIMARY");

                    b.HasIndex("DraftId", "RankType")
                        .HasName("draft_ranktype");

                    b.ToTable("draft_players");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.DraftVersions", b =>
                {
                    b.Property<uint>("DraftId")
                        .HasColumnName("draft_id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<byte>("RankType")
                        .HasColumnName("rank_type")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<uint?>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint?>("LastModifiedBy")
                        .HasColumnName("last_modified_by")
                        .HasColumnType("int(10) unsigned");

                    b.Property<DateTime>("LastPublished")
                        .HasColumnName("last_published")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastSaved")
                        .HasColumnName("last_saved")
                        .HasColumnType("datetime");

                    b.Property<byte>("PublishedRounds")
                        .HasColumnName("published_rounds")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("SavedRounds")
                        .HasColumnName("saved_rounds")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("DraftId", "RankType")
                        .HasName("PRIMARY");

                    b.ToTable("draft_versions");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Drafts", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<ushort>("Compensatory")
                        .HasColumnName("compensatory")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<uint?>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("int(10) unsigned");

                    b.Property<bool>("Displayfreeagents")
                        .HasColumnName("displayfreeagents")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("End")
                        .HasColumnName("end")
                        .HasColumnType("date");

                    b.Property<uint?>("LastModifiedBy")
                        .HasColumnName("last_modified_by")
                        .HasColumnType("int(10) unsigned");

                    b.Property<DateTime>("Lastupdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("lastupdate")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<sbyte>("Livemockstartinground")
                        .HasColumnName("livemockstartinground")
                        .HasColumnType("tinyint(3)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnName("location")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<bool>("ManageDraft")
                        .HasColumnName("manage_draft")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte>("Monthonly")
                        .HasColumnName("monthonly")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte?>("OpenBy")
                        .HasColumnName("open_by")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<uint>("Playerdisplay")
                        .HasColumnName("playerdisplay")
                        .HasColumnType("int(10) unsigned");

                    b.Property<ushort>("Rounddisplay")
                        .HasColumnName("rounddisplay")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<uint>("Sport")
                        .HasColumnName("sport")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<DateTime>("Start")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("start")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<byte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("TeamOrderChange")
                        .HasColumnName("team_order_change")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("time")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<byte>("Tradesuppress")
                        .HasColumnName("tradesuppress")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("Type")
                        .HasColumnName("type")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<ushort>("Usermockplayerlimit")
                        .HasColumnName("usermockplayerlimit")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnName("year")
                        .HasColumnType("char(4)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("Year")
                        .HasName("year");

                    b.HasIndex("Sport", "Status")
                        .HasName("sport");

                    b.ToTable("drafts");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.DraftsUnpublished", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint>("DraftId")
                        .HasColumnName("draft_id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<DateTime>("Lastupdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("lastupdate")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<byte[]>("PostVars")
                        .IsRequired()
                        .HasColumnName("post_vars")
                        .HasColumnType("blob");

                    b.Property<uint>("SportId")
                        .HasColumnName("sport_id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<byte>("Steps")
                        .HasColumnName("steps")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<uint>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.HasKey("Id");

                    b.ToTable("drafts_unpublished");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Draftteams", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<byte[]>("Commentary")
                        .IsRequired()
                        .HasColumnName("commentary")
                        .HasColumnType("blob");

                    b.Property<uint>("Draft")
                        .HasColumnName("draft")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<DateTime>("Lastupdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("lastupdate")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<ushort>("Rank")
                        .HasColumnName("rank")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<uint>("Team")
                        .HasColumnName("team")
                        .HasColumnType("mediumint(8) unsigned");

                    b.HasKey("Id");

                    b.ToTable("draftteams");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Fantasy", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("int(10) unsigned");

                    b.Property<DateTime>("DatePublished")
                        .HasColumnName("date_published")
                        .HasColumnType("datetime");

                    b.Property<uint>("LastModifiedBy")
                        .HasColumnName("last_modified_by")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(250)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.Property<uint>("Playerdisplay")
                        .HasColumnName("playerdisplay")
                        .HasColumnType("int(11) unsigned");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("slug")
                        .HasColumnType("varchar(250)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.Property<uint>("SportId")
                        .HasColumnName("sport_id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<byte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnName("year")
                        .HasColumnType("char(4)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.HasKey("Id");

                    b.ToTable("fantasy");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.FantasyRankings", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("FantasyId")
                        .HasColumnName("fantasy_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Positions")
                        .IsRequired()
                        .HasColumnName("positions")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.Property<ushort>("Rank")
                        .HasColumnName("rank")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<uint>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("Id");

                    b.ToTable("fantasy_rankings");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Games", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(30)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("name");

                    b.ToTable("games");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Globals", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte[]>("Message")
                        .IsRequired()
                        .HasColumnName("message")
                        .HasColumnType("blob");

                    b.Property<sbyte>("Sponsortakeover")
                        .HasColumnName("sponsortakeover")
                        .HasColumnType("tinyint(4)");

                    b.HasKey("Id");

                    b.ToTable("globals");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Leagues", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint>("Country")
                        .HasColumnName("country")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnName("nickname")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("leagues");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.LoginCookieData", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int(10)");

                    b.Property<int>("Series")
                        .HasColumnName("series")
                        .HasColumnType("int(6)");

                    b.Property<int>("Token")
                        .HasColumnName("token")
                        .HasColumnType("int(6)");

                    b.Property<DateTime>("Expires")
                        .HasColumnName("expires")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastVerified")
                        .HasColumnName("last_verified")
                        .HasColumnType("datetime");

                    b.HasKey("UserId", "Series", "Token")
                        .HasName("PRIMARY");

                    b.ToTable("login_cookie_data");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.MockDrafts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("mediumint(8)");

                    b.Property<bool>("Current")
                        .HasColumnName("current")
                        .HasColumnType("tinyint(1)")
                        .HasComment("1=Current Mock. 0=Prior Mock");

                    b.Property<DateTime>("DatePublished")
                        .HasColumnName("date_published")
                        .HasColumnType("datetime");

                    b.Property<int>("DraftId")
                        .HasColumnName("draft_id")
                        .HasColumnType("mediumint(9)");

                    b.Property<sbyte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(4)");

                    b.Property<short>("Version")
                        .HasColumnName("version")
                        .HasColumnType("smallint(6)");

                    b.HasKey("Id");

                    b.HasIndex("DraftId", "Version")
                        .IsUnique()
                        .HasName("draft_version");

                    b.ToTable("mock_drafts");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.MockDraftsDeleted", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("mediumint(8)");

                    b.Property<bool>("Current")
                        .HasColumnName("current")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("DatePublished")
                        .HasColumnName("date_published")
                        .HasColumnType("datetime");

                    b.Property<int>("DraftId")
                        .HasColumnName("draft_id")
                        .HasColumnType("mediumint(9)");

                    b.Property<sbyte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(4)");

                    b.Property<short>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("version")
                        .HasColumnType("smallint(6)")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Id");

                    b.ToTable("mock_drafts_deleted");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.MockPicks", b =>
                {
                    b.Property<int>("MockDraftId")
                        .HasColumnName("mock_draft_id")
                        .HasColumnType("mediumint(8)");

                    b.Property<short>("Order")
                        .HasColumnName("order")
                        .HasColumnType("smallint(5)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnName("comments")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("mediumint(8)");

                    b.Property<short>("Rank")
                        .HasColumnName("rank")
                        .HasColumnType("smallint(5)");

                    b.Property<sbyte>("RoundOrder")
                        .HasColumnName("round_order")
                        .HasColumnType("tinyint(3)");

                    b.Property<int>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("mediumint(8)");

                    b.Property<bool>("Type")
                        .HasColumnName("type")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TypeDesc")
                        .IsRequired()
                        .HasColumnName("type_desc")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("MockDraftId", "Order")
                        .HasName("PRIMARY");

                    b.ToTable("mock_picks");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.MockPicksDeleted", b =>
                {
                    b.Property<int>("MockDraftId")
                        .HasColumnName("mock_draft_id")
                        .HasColumnType("mediumint(8)");

                    b.Property<short>("Order")
                        .HasColumnName("order")
                        .HasColumnType("smallint(5)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnName("comments")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("mediumint(8)");

                    b.Property<short>("Rank")
                        .HasColumnName("rank")
                        .HasColumnType("smallint(5)");

                    b.Property<sbyte>("RoundOrder")
                        .HasColumnName("round_order")
                        .HasColumnType("tinyint(3)");

                    b.Property<int>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("mediumint(8)");

                    b.Property<bool>("Type")
                        .HasColumnName("type")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TypeDesc")
                        .IsRequired()
                        .HasColumnName("type_desc")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("MockDraftId", "Order")
                        .HasName("PRIMARY");

                    b.ToTable("mock_picks_deleted");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.MockRounds", b =>
                {
                    b.Property<int>("MockDraftId")
                        .HasColumnName("mock_draft_id")
                        .HasColumnType("mediumint(8)");

                    b.Property<sbyte>("Order")
                        .HasColumnName("order")
                        .HasColumnType("tinyint(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("MockDraftId", "Order")
                        .HasName("PRIMARY");

                    b.ToTable("mock_rounds");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.MockRoundsDeleted", b =>
                {
                    b.Property<int>("MockDraftId")
                        .HasColumnName("mock_draft_id")
                        .HasColumnType("mediumint(8)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<sbyte>("Order")
                        .HasColumnName("order")
                        .HasColumnType("tinyint(3)");

                    b.ToTable("mock_rounds_deleted");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.MockTrades", b =>
                {
                    b.Property<int>("MockDraftId")
                        .HasColumnName("mock_draft_id")
                        .HasColumnType("mediumint(8)");

                    b.Property<short>("PickOrder")
                        .HasColumnName("pick_order")
                        .HasColumnType("smallint(5)");

                    b.Property<string>("TeamIds")
                        .IsRequired()
                        .HasColumnName("team_ids")
                        .HasColumnType("tinytext")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("TradeTransId")
                        .HasColumnName("trade_trans_id")
                        .HasColumnType("mediumint(8)");

                    b.HasKey("MockDraftId", "PickOrder")
                        .HasName("PRIMARY");

                    b.ToTable("mock_trades");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.MockTradesDeleted", b =>
                {
                    b.Property<int>("MockDraftId")
                        .HasColumnName("mock_draft_id")
                        .HasColumnType("mediumint(8)");

                    b.Property<short>("PickOrder")
                        .HasColumnName("pick_order")
                        .HasColumnType("smallint(5)");

                    b.Property<string>("TeamIds")
                        .IsRequired()
                        .HasColumnName("team_ids")
                        .HasColumnType("tinytext")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("TradeTransId")
                        .HasColumnName("trade_trans_id")
                        .HasColumnType("mediumint(8)");

                    b.ToTable("mock_trades_deleted");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Permissions", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint>("Admin")
                        .HasColumnName("admin")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<byte>("AdminEdit")
                        .HasColumnName("admin_edit")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("Ads")
                        .HasColumnName("ads")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("Agreement")
                        .HasColumnName("agreement")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("Delete")
                        .HasColumnName("delete")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("DraftsCreate")
                        .HasColumnName("drafts_create")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("DraftsEdit")
                        .HasColumnName("drafts_edit")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("DraftsImport")
                        .HasColumnName("drafts_import")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("DraftsStage4Edit")
                        .HasColumnName("drafts_stage_4_edit")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("Players")
                        .HasColumnName("players")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("PlayersMedia")
                        .HasColumnName("players_media")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("Positions")
                        .HasColumnName("positions")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("Posts")
                        .HasColumnName("posts")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("Ranks")
                        .HasColumnName("ranks")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("Redrafts")
                        .HasColumnName("redrafts")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("Rule")
                        .HasColumnName("rule")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("Schools")
                        .HasColumnName("schools")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<string>("SportAccess")
                        .IsRequired()
                        .HasColumnName("sport_access")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<byte>("Sports")
                        .HasColumnName("sports")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("Teams")
                        .HasColumnName("teams")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("UserEdit")
                        .HasColumnName("user_edit")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("WhatsNew")
                        .HasColumnName("whats_new")
                        .HasColumnType("tinyint(3) unsigned");

                    b.HasKey("Id");

                    b.HasIndex("Admin")
                        .IsUnique()
                        .HasName("admin");

                    b.ToTable("permissions");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Picks", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<byte[]>("Comments")
                        .IsRequired()
                        .HasColumnName("comments")
                        .HasColumnType("blob");

                    b.Property<DateTime>("Lastupdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("lastupdate")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<ushort>("Pick")
                        .HasColumnName("pick")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<uint>("Round")
                        .HasColumnName("round")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint>("Team")
                        .HasColumnName("team")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<byte>("Type")
                        .HasColumnName("type")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<string>("Typename")
                        .IsRequired()
                        .HasColumnName("typename")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("Team")
                        .HasName("team");

                    b.HasIndex("Round", "Type")
                        .HasName("round_type");

                    b.ToTable("picks");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.PicksTemp", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<byte[]>("Comments")
                        .IsRequired()
                        .HasColumnName("comments")
                        .HasColumnType("blob");

                    b.Property<DateTime>("Lastupdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("lastupdate")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<ushort>("Pick")
                        .HasColumnName("pick")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<uint>("Round")
                        .HasColumnName("round")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint>("Team")
                        .HasColumnName("team")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<byte>("Type")
                        .HasColumnName("type")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<string>("Typename")
                        .IsRequired()
                        .HasColumnName("typename")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("picks_temp");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.PlayerContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<bool>("Approved")
                        .HasColumnName("approved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnName("data")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_unicode_ci");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnName("last_update")
                        .HasColumnType("datetime");

                    b.Property<int>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("int(11)");

                    b.Property<sbyte>("TypeId")
                        .HasColumnName("type_id")
                        .HasColumnType("tinyint(2)");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int(10)");

                    b.HasKey("Id");

                    b.ToTable("player_content");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.PlayerContentTypes", b =>
                {
                    b.Property<sbyte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("tinyint(2)");

                    b.Property<string>("Column")
                        .IsRequired()
                        .HasColumnName("column")
                        .HasColumnType("enum('1','2')")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_unicode_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_unicode_ci");

                    b.Property<sbyte>("PlayerLimit")
                        .HasColumnName("player_limit")
                        .HasColumnType("tinyint(2)");

                    b.Property<bool?>("ShowName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("show_name")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<sbyte>("UserLimit")
                        .HasColumnName("user_limit")
                        .HasColumnType("tinyint(2)");

                    b.HasKey("Id");

                    b.ToTable("player_content_types");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Players", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<string>("Age")
                        .HasColumnName("age")
                        .HasColumnType("char(2)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<byte>("Bats")
                        .HasColumnName("bats")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte[]>("Commentary")
                        .IsRequired()
                        .HasColumnName("commentary")
                        .HasColumnType("blob");

                    b.Property<uint>("Country")
                        .HasColumnName("country")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<uint?>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("int(10) unsigned");

                    b.Property<DateTime?>("Dob")
                        .HasColumnName("dob")
                        .HasColumnType("date");

                    b.Property<string>("Draftclass")
                        .IsRequired()
                        .HasColumnName("draftclass")
                        .HasColumnType("char(4)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<sbyte?>("Fantasy")
                        .HasColumnName("fantasy")
                        .HasColumnType("tinyint(3)");

                    b.Property<string>("FantasyPositions")
                        .HasColumnName("fantasy_positions")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int?>("FantasyTeam")
                        .HasColumnName("fantasy_team")
                        .HasColumnType("int(11)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnName("firstname")
                        .HasColumnType("varchar(40)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Gradclass")
                        .IsRequired()
                        .HasColumnName("gradclass")
                        .HasColumnType("char(4)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<byte>("Heightf")
                        .HasColumnName("heightf")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<double>("Heighti")
                        .HasColumnName("heighti")
                        .HasColumnType("double unsigned");

                    b.Property<uint>("Highschool")
                        .HasColumnName("highschool")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint?>("LastModifiedBy")
                        .HasColumnName("last_modified_by")
                        .HasColumnType("int(10) unsigned");

                    b.Property<DateTime?>("Lastactivity")
                        .HasColumnName("lastactivity")
                        .HasColumnType("datetime");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnName("lastname")
                        .HasColumnType("varchar(40)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime>("Lastupdate")
                        .HasColumnName("lastupdate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Notes")
                        .IsRequired()
                        .HasColumnName("notes")
                        .HasColumnType("blob");

                    b.Property<uint?>("PlayerComparison")
                        .HasColumnName("player_comparison")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("Position")
                        .HasColumnName("position")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint>("Prehighschool")
                        .HasColumnName("prehighschool")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint>("Preposition")
                        .HasColumnName("preposition")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint>("Preschool")
                        .HasColumnName("preschool")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint?>("Preteam")
                        .HasColumnName("preteam")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<byte>("Redshirt")
                        .HasColumnName("redshirt")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<uint?>("School")
                        .HasColumnName("school")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<byte>("Shoots")
                        .HasColumnName("shoots")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<uint>("Sport")
                        .HasColumnName("sport")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<byte[]>("Stats")
                        .IsRequired()
                        .HasColumnName("stats")
                        .HasColumnType("blob");

                    b.Property<byte>("Status")
                        .HasColumnName("status")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<uint>("Team")
                        .HasColumnName("team")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<byte>("Throws")
                        .HasColumnName("throws")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<string>("TwitterHandler")
                        .HasColumnName("twitter_handler")
                        .HasColumnType("varchar(250)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<ushort>("Weight")
                        .HasColumnName("weight")
                        .HasColumnType("smallint(5) unsigned");

                    b.HasKey("Id");

                    b.HasIndex("Highschool")
                        .HasName("highschool");

                    b.HasIndex("Position")
                        .HasName("position");

                    b.HasIndex("School")
                        .HasName("school");

                    b.HasIndex("Team")
                        .HasName("team");

                    b.ToTable("players");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Positions", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnName("fullname")
                        .HasColumnType("varchar(40)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<byte>("Game")
                        .HasColumnName("game")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(5)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<sbyte>("Sort")
                        .HasColumnName("sort")
                        .HasColumnType("tinyint(2)");

                    b.HasKey("Id");

                    b.ToTable("positions");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.PositionsSub", b =>
                {
                    b.Property<sbyte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("tinyint(4)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnName("full name")
                        .HasColumnType("varchar(40)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<sbyte>("MainPositions")
                        .HasColumnName("main positions")
                        .HasColumnType("tinyint(4)")
                        .HasComment("main pos reference num");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(10)")
                        .HasComment("abbreviated name")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("positions_sub");

                    b.HasComment("Sub positions drawing from main position table");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Ranks", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<uint>("Draft")
                        .HasColumnName("draft")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<DateTime>("Lastupdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("lastupdate")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<uint>("Player")
                        .HasColumnName("player")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<ushort>("Rank")
                        .HasColumnName("rank")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<byte>("Type")
                        .HasColumnName("type")
                        .HasColumnType("tinyint(3) unsigned");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .HasName("type");

                    b.HasIndex("Draft", "Type")
                        .HasName("draft");

                    b.HasIndex("Draft", "Type", "Rank")
                        .HasName("draft_type_rank");

                    b.ToTable("ranks");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.RanksTemp", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint(8) unsigned");

                    b.Property<uint>("Draft")
                        .HasColumnName("draft")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<DateTime>("Lastupdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("lastupdate")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<uint>("Player")
                        .HasColumnName("player")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<ushort>("Rank")
                        .HasColumnName("rank")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<byte>("Type")
                        .HasColumnName("type")
                        .HasColumnType("tinyint(3) unsigned");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .HasName("type");

                    b.HasIndex("Draft", "Type")
                        .HasName("draft");

                    b.HasIndex("Draft", "Type", "Rank")
                        .HasName("draft_type_rank");

                    b.ToTable("ranks_temp");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.ResetPassword", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnName("key")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("timestamp")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<bool>("Used")
                        .HasColumnName("used")
                        .HasColumnType("tinyint(1)");

                    b.Property<uint>("User")
                        .HasColumnName("user")
                        .HasColumnType("mediumint(8) unsigned");

                    b.HasKey("Id");

                    b.ToTable("reset_password");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Rounds", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint>("Draft")
                        .HasColumnName("draft")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<byte>("Round")
                        .HasColumnName("round")
                        .HasColumnType("tinyint(3) unsigned");

                    b.HasKey("Id");

                    b.HasIndex("Draft", "Round")
                        .HasName("draft_round");

                    b.ToTable("rounds");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Rules", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint>("Sport")
                        .HasColumnName("sport")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<byte[]>("Text")
                        .HasColumnName("text")
                        .HasColumnType("mediumblob");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("time")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.HasKey("Id");

                    b.ToTable("rules");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Schools", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("city")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<uint>("Conference")
                        .HasColumnName("conference")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint>("Country")
                        .HasColumnName("country")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint?>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Display")
                        .IsRequired()
                        .HasColumnName("display")
                        .HasColumnType("varchar(30)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<uint?>("LastModifiedBy")
                        .HasColumnName("last_modified_by")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(90)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<byte>("Private")
                        .HasColumnName("private")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<int>("State")
                        .HasColumnName("state")
                        .HasColumnType("mediumint(9)");

                    b.Property<string>("Teamname")
                        .IsRequired()
                        .HasColumnName("teamname")
                        .HasColumnType("varchar(40)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<byte>("Type")
                        .HasColumnName("type")
                        .HasColumnType("tinyint(3) unsigned");

                    b.HasKey("Id");

                    b.ToTable("schools");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Settings", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("value")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("settings");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Sports", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("active")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<byte>("Game")
                        .HasColumnName("game")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte[]>("Message")
                        .IsRequired()
                        .HasColumnName("message")
                        .HasColumnType("blob");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnName("nickname")
                        .HasColumnType("varchar(10)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<sbyte>("Sort")
                        .HasColumnName("sort")
                        .HasColumnType("tinyint(4)");

                    b.Property<sbyte>("Sponsortakeover")
                        .HasColumnName("sponsortakeover")
                        .HasColumnType("tinyint(4)");

                    b.Property<byte>("Visible")
                        .HasColumnName("visible")
                        .HasColumnType("tinyint(1) unsigned");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("name");

                    b.HasIndex("Nickname")
                        .IsUnique()
                        .HasName("nickname");

                    b.ToTable("sports");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.States", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<string>("Abbrev")
                        .IsRequired()
                        .HasColumnName("abbrev")
                        .HasColumnType("char(2)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.Property<int>("Country")
                        .HasColumnName("country")
                        .HasColumnType("mediumint(9)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("char(40)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.HasKey("Id");

                    b.HasIndex("Abbrev")
                        .IsUnique()
                        .HasName("abbrev");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("name");

                    b.ToTable("states");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Staticpicks", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<byte[]>("Comments")
                        .IsRequired()
                        .HasColumnName("comments")
                        .HasColumnType("blob");

                    b.Property<uint>("Draft")
                        .HasColumnName("draft")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("Pick")
                        .HasColumnName("pick")
                        .HasColumnType("int(10) unsigned");

                    b.Property<ulong>("Player")
                        .HasColumnName("player")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<uint>("Position")
                        .HasColumnName("position")
                        .HasColumnType("int(10) unsigned");

                    b.Property<ushort>("Round")
                        .HasColumnName("round")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<ulong>("Team")
                        .HasColumnName("team")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<uint>("Tradelink")
                        .HasColumnName("tradelink")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Tradetext")
                        .IsRequired()
                        .HasColumnName("tradetext")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<byte>("Type")
                        .HasColumnName("type")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<string>("Typename")
                        .IsRequired()
                        .HasColumnName("typename")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("staticpicks");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Suppicks", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint>("Draft")
                        .HasColumnName("draft")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<DateTime>("Lastupdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("lastupdate")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<uint>("Pick")
                        .HasColumnName("pick")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<byte>("Round")
                        .HasColumnName("round")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<uint>("Team")
                        .HasColumnName("team")
                        .HasColumnType("mediumint(8) unsigned");

                    b.HasKey("Id");

                    b.HasIndex("Draft", "Pick")
                        .HasName("draft_pick");

                    b.ToTable("suppicks");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.TeamDraftAnalysis", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<byte[]>("Analysis")
                        .IsRequired()
                        .HasColumnName("analysis")
                        .HasColumnType("blob");

                    b.Property<uint>("Draft")
                        .HasColumnName("draft")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<string>("Positions")
                        .IsRequired()
                        .HasColumnName("positions")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<byte[]>("Preview")
                        .IsRequired()
                        .HasColumnName("preview")
                        .HasColumnType("blob");

                    b.Property<uint>("Team")
                        .HasColumnName("team")
                        .HasColumnType("mediumint(8) unsigned");

                    b.HasKey("Id");

                    b.ToTable("team_draft_analysis");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Teams", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<byte>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("active")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValueSql("'1'");

                    b.Property<uint>("Country")
                        .HasColumnName("country")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint?>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Display")
                        .IsRequired()
                        .HasColumnName("display")
                        .HasColumnType("varchar(30)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Home")
                        .IsRequired()
                        .HasColumnName("home")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<uint?>("LastModifiedBy")
                        .HasColumnName("last_modified_by")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("League")
                        .HasColumnName("league")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<byte>("Sport")
                        .HasColumnName("sport")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("State")
                        .HasColumnName("state")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<uint>("Successor")
                        .HasColumnName("successor")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<byte>("Type")
                        .HasColumnName("type")
                        .HasColumnType("tinyint(3) unsigned");

                    b.HasKey("Id");

                    b.HasIndex("Successor")
                        .HasName("successor");

                    b.HasIndex("Sport", "League", "Active")
                        .HasName("sport_league_active");

                    b.ToTable("teams");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.TeamsPreviousNames", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Display")
                        .IsRequired()
                        .HasColumnName("display")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("EndYear")
                        .IsRequired()
                        .HasColumnName("end_year")
                        .HasColumnType("char(4)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Home")
                        .IsRequired()
                        .HasColumnName("home")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<uint>("LastModifiedBy")
                        .HasColumnName("last_modified_by")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("StartYear")
                        .IsRequired()
                        .HasColumnName("start_year")
                        .HasColumnType("char(4)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<uint>("Team")
                        .HasColumnName("team")
                        .HasColumnType("mediumint(8) unsigned");

                    b.HasKey("Id");

                    b.ToTable("teams_previous_names");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Tradecheck", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint(10) unsigned");

                    b.Property<double>("Check")
                        .HasColumnName("check")
                        .HasColumnType("double");

                    b.Property<uint>("Trans")
                        .HasColumnName("trans")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("Id");

                    b.HasIndex("Trans", "Check")
                        .HasName("trans");

                    b.ToTable("tradecheck");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Trades", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("date");

                    b.Property<byte[]>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("blob");

                    b.Property<DateTime>("Lastupdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("lastupdate")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<byte>("Sport")
                        .HasColumnName("sport")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("Type")
                        .HasColumnName("type")
                        .HasColumnType("tinyint(3) unsigned");

                    b.HasKey("Id");

                    b.ToTable("trades");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Tradetransactions", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<byte>("Check")
                        .HasColumnName("check")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<uint>("From")
                        .HasColumnName("from")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint>("Fromoriginal")
                        .HasColumnName("fromoriginal")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<string>("Futuredraft")
                        .IsRequired()
                        .HasColumnName("futuredraft")
                        .HasColumnType("char(4)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<byte>("Picktype")
                        .HasColumnName("picktype")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<string>("Player")
                        .IsRequired()
                        .HasColumnName("player")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("PlayersTo")
                        .IsRequired()
                        .HasColumnName("players_to")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<uint>("Round")
                        .HasColumnName("round")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<byte>("Specialpickinstance")
                        .HasColumnName("specialpickinstance")
                        .HasColumnType("tinyint(2) unsigned");

                    b.Property<uint>("To")
                        .HasColumnName("to")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint>("Trade")
                        .HasColumnName("trade")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<byte>("Type")
                        .HasColumnName("type")
                        .HasColumnType("tinyint(3) unsigned");

                    b.HasKey("Id");

                    b.HasIndex("From")
                        .HasName("from");

                    b.HasIndex("Round", "Fromoriginal", "From")
                        .HasName("round_fromorig_from");

                    b.HasIndex("Round", "Fromoriginal", "From", "Type")
                        .HasName("round_fromorig_from_type");

                    b.ToTable("tradetransactions");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.UserAuthTokens", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<DateTime>("Expires")
                        .HasColumnName("expires")
                        .HasColumnType("datetime");

                    b.Property<string>("HashedValidator")
                        .IsRequired()
                        .HasColumnName("hashed_validator")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.Property<string>("Selector")
                        .IsRequired()
                        .HasColumnName("selector")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.Property<uint>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.HasKey("Id");

                    b.ToTable("user_auth_tokens");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.UserDraftVotes", b =>
                {
                    b.Property<string>("VotingUserId")
                        .HasColumnName("voting_user_id")
                        .HasColumnType("varchar(10)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("OwnerUserId")
                        .HasColumnName("owner_user_id")
                        .HasColumnType("varchar(10)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("DraftId")
                        .HasColumnName("draft_id")
                        .HasColumnType("varchar(8)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime?>("Lastupdate")
                        .HasColumnName("lastupdate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Rating")
                        .HasColumnName("rating")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("VotingUserId", "OwnerUserId", "DraftId")
                        .HasName("PRIMARY");

                    b.HasIndex("OwnerUserId", "DraftId")
                        .HasName("owner_user_id");

                    b.ToTable("user_draft_votes");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.UserGamificationCalculation", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<uint>("CorrectMocks")
                        .HasColumnName("correct_mocks")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("CreateMocks")
                        .HasColumnName("create_mocks")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("MockVotes")
                        .HasColumnName("mock_votes")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("MocksVoted")
                        .HasColumnName("mocks_voted")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("PlayerAdditions")
                        .HasColumnName("player_additions")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("PlayerComparison")
                        .HasColumnName("player_comparison")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("ScoutingReports")
                        .HasColumnName("scouting_reports")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TeamNeeds")
                        .HasColumnName("team_needs")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TeamPreview")
                        .HasColumnName("team_preview")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("Total")
                        .HasColumnName("total")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint>("Videos")
                        .HasColumnName("videos")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("Id");

                    b.ToTable("user_gamification_calculation");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.UserGamificationPoints", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.Property<int>("Point")
                        .HasColumnName("point")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("name");

                    b.ToTable("user_gamification_points");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.UserMockDrafts", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<byte>("CommentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("comment_status")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasDefaultValueSql("'1'");

                    b.Property<uint>("DraftId")
                        .HasColumnName("draft_id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnName("last_update")
                        .HasColumnType("datetime");

                    b.Property<byte>("SharedStatus")
                        .HasColumnName("shared_status")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<uint>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<bool>("UserRoundLimit")
                        .HasColumnName("user_round_limit")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("DraftId", "UserId")
                        .IsUnique()
                        .HasName("draft_user");

                    b.ToTable("user_mock_drafts");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.UserMockDraftsContest", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("DraftId")
                        .HasColumnName("draft_id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<byte>("Points")
                        .HasColumnName("points")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<uint>("Rank")
                        .HasColumnName("rank")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.HasKey("Id");

                    b.ToTable("user_mock_drafts_contest");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.UserPlayerRankings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int>("DraftId")
                        .HasColumnName("draft_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("Rank")
                        .HasColumnName("rank")
                        .HasColumnType("int(11)");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("visibility")
                        .HasColumnType("enum('1','0')")
                        .HasDefaultValueSql("'0'")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.HasKey("Id");

                    b.ToTable("user_player_rankings");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.UserPlayers", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<byte>("Approved")
                        .HasColumnName("approved")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<uint>("Country")
                        .HasColumnName("country")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<uint>("Draftclass")
                        .HasColumnName("draftclass")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnName("firstname")
                        .HasColumnType("varchar(40)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<uint>("Gradclass")
                        .HasColumnName("gradclass")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<byte>("Heightf")
                        .HasColumnName("heightf")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<double>("Heighti")
                        .HasColumnName("heighti")
                        .HasColumnType("double unsigned");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnName("lastname")
                        .HasColumnType("varchar(40)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime>("Lastupdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("lastupdate")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<uint>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("Position")
                        .HasColumnName("position")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint>("School")
                        .HasColumnName("school")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint>("Sport")
                        .HasColumnName("sport")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint>("Team")
                        .HasColumnName("team")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<string>("TwitterHandler")
                        .IsRequired()
                        .HasColumnName("twitter_handler")
                        .HasColumnType("varchar(250)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<uint>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<ushort>("Weight")
                        .HasColumnName("weight")
                        .HasColumnType("smallint(5) unsigned");

                    b.HasKey("Id");

                    b.ToTable("user_players");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.UserRedrafts", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("DraftId")
                        .HasColumnName("draft_id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnName("last_update")
                        .HasColumnType("datetime");

                    b.Property<byte>("SharedStatus")
                        .HasColumnName("shared_status")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<uint>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<bool>("UserRoundLimit")
                        .HasColumnName("user_round_limit")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("DraftId", "UserId")
                        .IsUnique()
                        .HasName("draft_user");

                    b.ToTable("user_redrafts");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.UserTeamDraftAnalysis", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Analysis")
                        .IsRequired()
                        .HasColumnName("analysis")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.Property<bool?>("Approved")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("approved")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("DraftId")
                        .HasColumnName("draft_id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<string>("Preview")
                        .IsRequired()
                        .HasColumnName("preview")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.Property<bool?>("SharedStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("shared_status")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<uint>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.HasKey("Id");

                    b.ToTable("user_team_draft_analysis");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.UserTeamDraftAnalysisPicks", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("Order")
                        .HasColumnName("order")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("PositionId")
                        .HasColumnName("position_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("UserTeamDraftAnalysisId")
                        .HasColumnName("user_team_draft_analysis_id")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("Id");

                    b.ToTable("user_team_draft_analysis_picks");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.UserTeamPicks", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("Draft")
                        .HasColumnName("draft")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<ushort>("Rank")
                        .HasColumnName("rank")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<byte>("Round")
                        .HasColumnName("round")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<uint>("RoundId")
                        .HasColumnName("round_id")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint>("Team")
                        .HasColumnName("team")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<byte>("Type")
                        .HasColumnName("type")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<string>("TypeDesc")
                        .IsRequired()
                        .HasColumnName("type_desc")
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<uint>("User")
                        .HasColumnName("user")
                        .HasColumnType("mediumint(8) unsigned");

                    b.HasKey("Id");

                    b.ToTable("user_team_picks");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Userranks", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<byte[]>("Comments")
                        .IsRequired()
                        .HasColumnName("comments")
                        .HasColumnType("blob");

                    b.Property<uint>("Draft")
                        .HasColumnName("draft")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<DateTime>("Lastupdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("lastupdate")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<uint>("Player")
                        .HasColumnName("player")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<ushort>("Rank")
                        .HasColumnName("rank")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<byte>("Type")
                        .HasColumnName("type")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<uint>("User")
                        .HasColumnName("user")
                        .HasColumnType("mediumint(8) unsigned");

                    b.HasKey("Id");

                    b.HasIndex("Draft", "User")
                        .HasName("draft_user");

                    b.ToTable("userranks");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.UserranksCopy", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<byte[]>("Comments")
                        .IsRequired()
                        .HasColumnName("comments")
                        .HasColumnType("blob");

                    b.Property<uint>("Draft")
                        .HasColumnName("draft")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<DateTime>("Lastupdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("lastupdate")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<uint>("Player")
                        .HasColumnName("player")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<ushort>("Rank")
                        .HasColumnName("rank")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<byte>("Type")
                        .HasColumnName("type")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<uint>("User")
                        .HasColumnName("user")
                        .HasColumnType("mediumint(8) unsigned");

                    b.HasKey("Id");

                    b.HasIndex("Draft", "User")
                        .HasName("draft_user");

                    b.ToTable("userranks_copy");
                });

            modelBuilder.Entity("DraftSiteModels.DraftSite.Users", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<ushort>("Country")
                        .HasColumnName("country")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<string>("Dob")
                        .IsRequired()
                        .HasColumnName("dob")
                        .HasColumnType("varchar(4)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("varchar(70)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("FacebookUsername")
                        .HasColumnName("facebook_username")
                        .HasColumnType("varchar(250)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<bool>("Featured")
                        .HasColumnName("featured")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnName("firstname")
                        .HasColumnType("varchar(70)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<byte>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<DateTime>("Joindate")
                        .HasColumnName("joindate")
                        .HasColumnType("date");

                    b.Property<DateTime>("Lastlogin")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("lastlogin")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'0000-00-00 00:00:00'");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnName("lastname")
                        .HasColumnType("varchar(70)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<byte>("Maillist")
                        .HasColumnName("maillist")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("varchar(60)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Photo")
                        .HasColumnName("photo")
                        .HasColumnType("varchar(250)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Securityanswer")
                        .IsRequired()
                        .HasColumnName("securityanswer")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<byte[]>("Securityphrase")
                        .IsRequired()
                        .HasColumnName("securityphrase")
                        .HasColumnType("blob");

                    b.Property<string>("Sportorder")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sportorder")
                        .HasColumnType("char(15)")
                        .HasDefaultValueSql("'1,5,3,2,4,6,7,8'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<uint>("Teammlb")
                        .HasColumnName("teammlb")
                        .HasColumnType("mediumint(5) unsigned");

                    b.Property<uint>("Teammls")
                        .HasColumnName("teammls")
                        .HasColumnType("mediumint(5) unsigned");

                    b.Property<uint>("Teamnba")
                        .HasColumnName("teamnba")
                        .HasColumnType("mediumint(5) unsigned");

                    b.Property<uint>("Teamnfl")
                        .HasColumnName("teamnfl")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint>("Teamnhl")
                        .HasColumnName("teamnhl")
                        .HasColumnType("mediumint(5) unsigned");

                    b.Property<uint>("Teamwnba")
                        .HasColumnName("teamwnba")
                        .HasColumnType("mediumint(5) unsigned");

                    b.Property<string>("TwitterHandle")
                        .HasColumnName("twitter_handle")
                        .HasColumnType("varchar(250)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasColumnType("varchar(30)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnName("zip")
                        .HasColumnType("varchar(5)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasName("username");

                    b.ToTable("users");
                });

            modelBuilder.Entity("DraftSiteModels.Entities.DraftStartType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("DraftStartTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsEnabled = true,
                            Name = "Manual",
                            Value = "Manual"
                        },
                        new
                        {
                            Id = 2,
                            IsEnabled = false,
                            Name = "Automatic",
                            Value = "Automatic"
                        });
                });

            modelBuilder.Entity("DraftSiteModels.Entities.DraftStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("DraftStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "WaitingForPlayers",
                            Value = "Waiting for players"
                        },
                        new
                        {
                            Id = 2,
                            Name = "WaitingForOwnerToStart",
                            Value = "Waiting for owner"
                        },
                        new
                        {
                            Id = 3,
                            Name = "WaitingForTimerToStart",
                            Value = "Waiting for time"
                        },
                        new
                        {
                            Id = 4,
                            Name = "InProgress",
                            Value = "In Progress"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Paused",
                            Value = "Paused"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Completed",
                            Value = "Completed"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Canceled",
                            Value = "Canceled"
                        });
                });

            modelBuilder.Entity("DraftSiteModels.Entities.DraftTeamUser", b =>
                {
                    b.Property<int>("DraftId")
                        .HasColumnType("int");

                    b.Property<uint>("UserId")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("TeamId")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<bool>("IsComputer")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MultiplayerDraftId")
                        .HasColumnType("int");

                    b.HasKey("DraftId", "UserId", "TeamId");

                    b.HasIndex("MultiplayerDraftId");

                    b.HasIndex("TeamId");

                    b.ToTable("DraftTeamUsers");
                });

            modelBuilder.Entity("DraftSiteModels.Entities.DraftTeamUserPlayer", b =>
                {
                    b.Property<int>("DraftId")
                        .HasColumnType("int");

                    b.Property<uint>("UserId")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint>("TeamId")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("PlayerId")
                        .HasColumnType("mediumint(8) unsigned");

                    b.HasKey("DraftId", "UserId", "TeamId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("DraftId", "TeamId", "UserId");

                    b.ToTable("DraftTeamUserPlayers");
                });

            modelBuilder.Entity("DraftSiteModels.Entities.DraftTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TimeInSeconds")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("DraftTimes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ThirtySeconds",
                            TimeInSeconds = 30,
                            Value = "30 Seconds"
                        },
                        new
                        {
                            Id = 2,
                            Name = "OneMinute",
                            TimeInSeconds = 60,
                            Value = "1 Minute"
                        },
                        new
                        {
                            Id = 3,
                            Name = "FiveMinutes",
                            TimeInSeconds = 300,
                            Value = "5 Minutes"
                        },
                        new
                        {
                            Id = 4,
                            Name = "OneHour",
                            TimeInSeconds = 3600,
                            Value = "1 Hour"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Unlimited",
                            TimeInSeconds = 0,
                            Value = "Unlimited"
                        });
                });

            modelBuilder.Entity("DraftSiteModels.Entities.DraftUser", b =>
                {
                    b.Property<int>("DraftId")
                        .HasColumnType("int");

                    b.Property<uint>("UserId")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("DraftId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("DraftUsers");
                });

            modelBuilder.Entity("DraftSiteModels.Entities.MultiplayerDraft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DraftStartTypeId")
                        .HasColumnType("int");

                    b.Property<int>("DraftStatusId")
                        .HasColumnType("int");

                    b.Property<bool>("IsComputerTeams")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMultiSelect")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<uint>("OwnerId")
                        .HasColumnType("int(10) unsigned");

                    b.Property<int>("PickTimeId")
                        .HasColumnType("int");

                    b.Property<int>("RoundCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("DraftStartTypeId");

                    b.HasIndex("DraftStatusId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PickTimeId");

                    b.ToTable("MultiPlayerDrafts");
                });

            modelBuilder.Entity("DraftSiteModels.Entities.DraftTeamUser", b =>
                {
                    b.HasOne("DraftSiteModels.Entities.MultiplayerDraft", null)
                        .WithMany("DraftTeamUsers")
                        .HasForeignKey("MultiplayerDraftId");

                    b.HasOne("DraftSiteModels.DraftSite.Teams", "Team")
                        .WithMany("DraftTeamUsers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DraftSiteModels.Entities.DraftUser", "DraftUser")
                        .WithMany("DraftTeamUsers")
                        .HasForeignKey("DraftId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DraftSiteModels.Entities.DraftTeamUserPlayer", b =>
                {
                    b.HasOne("DraftSiteModels.DraftSite.Players", "Player")
                        .WithMany("DraftTeamUserPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DraftSiteModels.Entities.DraftTeamUser", "DraftTeamUser")
                        .WithMany("DraftTeamUserPlayers")
                        .HasForeignKey("DraftId", "TeamId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DraftSiteModels.Entities.DraftUser", b =>
                {
                    b.HasOne("DraftSiteModels.Entities.MultiplayerDraft", "Draft")
                        .WithMany("DraftUsers")
                        .HasForeignKey("DraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DraftSiteModels.DraftSite.Users", "User")
                        .WithMany("DraftUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DraftSiteModels.Entities.MultiplayerDraft", b =>
                {
                    b.HasOne("DraftSiteModels.Entities.DraftStartType", "DraftStartType")
                        .WithMany("Drafts")
                        .HasForeignKey("DraftStartTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DraftSiteModels.Entities.DraftStatus", "DraftStatus")
                        .WithMany("Drafts")
                        .HasForeignKey("DraftStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DraftSiteModels.DraftSite.Users", "Owner")
                        .WithMany("MultiPlayerDrafts")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DraftSiteModels.Entities.DraftTime", "PickTime")
                        .WithMany("Drafts")
                        .HasForeignKey("PickTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
